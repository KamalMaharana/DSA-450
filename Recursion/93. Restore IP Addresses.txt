93. Restore IP Addresses
A valid IP address consists of exactly four integers separated by single dots. 
Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, 
but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses 
that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. 
You may return the valid IP addresses in any order.

Approach:
Generate all IPs by placing dots in a recursive manner.
Then when we reach the end or when we don't have enough dots, this becomes the base case;
So whatever IP that was formed till now, we pass it in a IP Validation Checker function which is a boolean.
Return True if IP is valid, else it return False.

Code:
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        def isValidIp(ip):
            ip = ip.split(".")
            if len(ip) != 4:
                return False
            
            for chr in ip:
                if not chr.isdigit():
                    return False
                if not (0 <= int(chr) <= 255):
                    return False
                if int(chr[0]) == 0 and int(chr) > 0:
                    return False
                if int(chr) == 0 and len(chr) > 1:
                    return False
            return True

        self.result = []
        def dfs(i, ip, dots):
            # print(f"IP: {ip}")
            if i >= len(s):
                if isValidIp(ip):
                    self.result.append(ip)
                return
            
            if dots == 0:
                if isValidIp(ip):
                    self.result.append(ip)
                return
            
            ip += s[i]
            dfs(i + 1, ip + ".", dots - 1)
            dfs(i + 1, ip, dots)
            return
        
        dfs(0, "", 4)
        return self.result