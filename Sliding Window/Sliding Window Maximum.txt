Note:
This is typical SLIDING window problem which uses DEQUE.
Here we are directly using a LIST in python because we can make it look like DEQUE as
we can append and remove from FRONT and REAR.
Here we use deque to store the indexes.
1st we do it for 1st window of size K;
We need to keep values in DEQUE in DECREASING ORDER.
While adding values to DEQUE, we check if value at REAR is < VAL;
If yes; then we pop from REAR until value at REAR becomes > VAL;
Then we append current VAL in DEQUE.

Append the value in FRONT of DEQUE to the RESULT array

After this we use WHILE loop for upcoming windows.
Before starting WHILE LOOP; we initialize left = 1 and right = K as the size of
current window because we have already calculated the result for 
window 0 -> K - 1 index.
Then 1st we remove values belonging to previous index;
so as we already incremented LEFT; so we check if LEFT > Index at FRONT of deque
because in worst case where array is sorted in decending order, then only FRONT
of deque will be a non valid index that is not part of the window.
If above is yes, then we pop the FRONT of DEQUE
Then we do the same checking as we did for 1st window while appending value in DEQUE
After this, we check if the size of current window  == K;
If yes, then we append FRONT of DEQUE in Result ARRAY.
Then we increment the window by LEFT ++ and RIGHT ++.


Solution:
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        deque = []
        result = []
        for i in range(k):
            val = nums[i]
            while deque and nums[deque[-1]] < val:
                deque.pop()
            deque.append(i)
        
        result.append(nums[deque[0]])
        l = 1
        r = k
        while r < len(nums):
            if l > deque[0]:
                deque.pop(0)
            val = nums[r]
            while deque and nums[deque[-1]] < val:
                deque.pop()
            deque.append(r)
            if (r - l + 1) == k:
                result.append(nums[deque[0]])
            l += 1
            r += 1
        return result