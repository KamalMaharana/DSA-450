class TrieNode:
    def __init__(self):
        self.children = {}
        self.isEnd = False
    
class WordDictionary:

    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        curr = self.root
        for ch in word:
            if ch not in curr.children:
                curr.children[ch] = TrieNode()
            curr = curr.children[ch]
        curr.isEnd = True
        

    def search(self, word: str) -> bool:
        def dfs(node, i):
            if i == len(word):
                return node.isEnd
            
            ch = word[i]
            if ch == ".":
                for char in node.children:
                    if dfs(node.children[char], i + 1):
                        return True
            else:
                if ch in node.children:
                    return dfs(node.children[ch], i + 1)
                return False
        
        return dfs(self.root, 0)
                    
            


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)