class TrieNode:
    def __init__(self, val):
        self.value = val
        self.children = dict()
        self.isEND = False
class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode(None)

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        parent = self.root
        for char in word:
            if char not in parent.children:
                parent.children[char] = TrieNode(char)
            parent = parent.children[char]
        parent.isEND = True
        

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        def dfs(node, i):
            if i == len(word):
                return node.isEND
            
            if word[i] == ".":
                for child in node.children:
                    if dfs(node.children[child], i+1):
                        return True
            
            if word[i] in node.children:
                return dfs(node.children[word[i]], i+1)
                
        return dfs(self.root, 0)
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)