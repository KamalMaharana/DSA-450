Question:
A transformation sequence from word beginWord to word endWord using a dictionary wordList 
is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words
in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.
 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

Approach:
This is SIMPLE BFS with STEPS solution, just like ROTTEN ORANGES.
The main thing here is to add valid values in queue, we replace each alphabet in the word with a
small english character "abcdefghijklmnopqrstuvwxyz"
Buy the above process, as we are replacing only single character, so the difference in character between current
word and new_word is equal 1.

for i in range(len(word)):
	for ch in "abcdefghijklmnopqrstuvwxyz":
		new_word = word[i : ] + ch + word[i+1 : ]
		if new_word in wordList:
			Remove from the WORDLIST set
			wordList.remove(new_word)
			queue.append([new_word, step + 1])
		
			

Solution:
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        queue = deque([[beginWord, 1]])
        wordList = set(wordList)
        while queue:
            word, step = queue.popleft()
            if word == endWord:
                return step
            
            for i in range(len(word)):
                for ch in "abcdefghijklmnopqrstuvwxyz":
                    new_word = word[:i] + ch + word[i+1:]
                    
                    if new_word in wordList:
                        wordList.remove(new_word)
                        queue.append([new_word, step + 1])
        return 0
        