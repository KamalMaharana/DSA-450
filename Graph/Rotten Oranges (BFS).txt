Note:
This is a simple BFS question, 1st we append all the ROTTEN ORANGES in 
Queue for BFS Processing, simultaneously we keep a count of all FRESH
Oranges because we need to check if all fresh oranges are rotten or not.
Then start the BFS on the QUEUE of rotten oranges.
On BFS go in 4 directions and check for following
1. If the direction is within the GRID, i.e valid index or not.
2. If it is a fresh orange or not.
Thus after BFS, if the no. of FRESH ORANGES is != 0; then return -1
Else return minutes or in this code it is refered as "levels"

Solution:
class Solution:
    def isValid(self, index, end):
        return 0 <= index < end
 
    def bfs(self, grid, queue, freshOranges, row, col):
        dirs = [[1,0],[-1,0],[0,1],[0,-1]]
        levels = 0
 
        while queue:
            levels += 1
            for _ in range(len(queue)):
                x, y = queue.popleft()
                for dx, dy in dirs:
                    if self.isValid(x+dx, row) and self.isValid(y+dy, col) and grid[x+dx][y+dy] == 1:
                        freshOranges -= 1
                        grid[x+dx][y+dy] = 2
                        queue.append((x+dx, y+dy))
 
        return -1 if freshOranges != 0 else max(levels-1, 0)
 
    def orangesRotting(self, grid: List[List[int]]) -> int:
        row, col, queue, freshOranges = len(grid), len(grid[0]), deque(), 0
        for i,j in product(range(row), range(col)):
            if grid[i][j] == 2: queue.append((i,j))
            if grid[i][j] == 1: freshOranges += 1
 
        result = self.bfs(grid, queue, freshOranges, row, col)
        return result