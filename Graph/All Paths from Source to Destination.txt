Notes:
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, 
find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from 
node i (i.e., there is a directed edge from node i to node graph[i][j]).


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

Approach:
This is a simple DFS Question.
Whenever there is "ALL" path/ways/ then GO FOR DFS.
Whenever there is "Shortest/Quickest/1st etc" then go for BFS
Here the main problem was to keep track of VISITED and PATH
So we used BACKTRACKING for it.
That is, 
Assign -> Recursion -> Revert.
1. we added to visited and path array.
2. Then we made the recursive call.
3. And after that we removed, poped current values from visited and path array, 
   Reverting the changes we made in step 1.


Solution:
class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        self.paths = []
        def dfs(node, visited, path, target):
            if node == target:
                # print(node, path, "target: ", target)
                self.paths.append(path[:])
                return
            
            for neighbour in graph[node]:
                if neighbour not in visited:
                    visited.add(neighbour)
                    path.append(neighbour)
                    # print(visited, node, path)
                    dfs(neighbour, visited, path, target)
                    visited.remove(neighbour)
                    path.pop()
        
        dfs(0, {0}, [0], len(graph) - 1)
        return self.paths