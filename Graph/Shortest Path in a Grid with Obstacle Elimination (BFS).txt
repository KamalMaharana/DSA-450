Q. https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/
Difficulty: HARD
Solution:
class Solution:
    def getDirections(self, x, y, grid, r, c):
        res = []
        dirs = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]
        for i, j in dirs:
            if 0 <= i < r and 0 <= j < c:
                res.append((i, j))
        return res
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        queue = [(0,0,k,0)]
        row, col = len(grid), len(grid[0])
        visited = set()
        while queue:
            x, y, r, cost = queue.pop(0)
            if x == row - 1 and y == col - 1:
                return cost
            if (x, y, r) in visited:
                continue
            visited.add((x, y, r))
            if grid[x][y]:
                if r > 0:
                    r -= 1
                else:
                    continue
            directions = self.getDirections(x, y, grid, row, col)
            for d in directions:
                i, j = d
                queue.append((i, j, r, cost + 1))
                    
        return -1
        