968. Binary Tree Cameras

You are given the root of a binary tree. We install cameras on the tree nodes 
where each camera at a node can monitor its parent, itself, and its immediate children.

Return the minimum number of cameras needed to monitor all nodes of the tree.

 

Example 1:


Input: root = [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.
Example 2:


Input: root = [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
Node.val == 0


Approach:
This is a DFS Problem, coz we want to evaluate from BOTTOM to TOP.
Consider a node in the tree.
It can be covered by its parent, itself, its two children.
Four options.

Consider the root of the tree.
It can be covered by left child, or right child, or itself.
Three options.

Consider one leaf of the tree.
It can be covered by its parent or by itself.
Two options.

If we set a camera at the leaf, the camera can cover the leaf and its parent.
If we set a camera at its parent, the camera can cover the leaf, its parent and its sibling.

We can see that the second plan is always better than the first.
Now we have only one option, set up camera to all leaves' parent.

Here is our greedy solution:

Set cameras on all leaves' parents, thenremove all covered nodes.
Repeat step 1 until all nodes are covered.

Explanation:
For a node, there can be 3 states.
1. Camera Not Needed.
2. Has Camera.
3. No Camera.

So when we a re backtracking from bottom to top, we check the following.
for None nodes, we return "Camera Not Needed" because Nodes that are not even in the tree cannot have camera.
Now for leaf nodes, where left = None and right = None, this means 
their left = "Camera Not Needed" and right = "Camera Not Needed", we know that we cannot place a
camera on the leaf node because greedly it's not the correct choice
but we know that we want to watch this Node from a Camera somewhere, so we return "No Camera", such that
it's parent can have the camera to watch the child.

If left = "No Camera" or right = "No Camera":
	This means our current node will need to have a CAMERA, so 
	camera_count += 1
	return "Has Camera"
Now if left = "Has Camera" or right = "Has Camera":
	This check will be after "No Camera" check.
	Because in the example shown at the bottom, we can see that 
	if a node receives "No Camera" from either left or right, they have to place a camera at current node.
	So if either left or right "Has Camera" then we no that current node is covered from camera
	of it's child.
	So we return "Camera Not Needed" for this node.

Code:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minCameraCover(self, root: TreeNode) -> int:
        self.result = 0
        def dfs(node):
            if not node:
                return "Camera Not Needed"
            left = dfs(node.left)
            right = dfs(node.right)
            if left == "No Camera" or right == "No Camera":
                self.result += 1
                return "Has Camera"
            elif left == "Has Camera" or right == "Has Camera":
                return "Camera Not Needed"
            else:
                return "No Camera"
        if dfs(root) == "No Camera":
            self.result += 1
        return self.result
		
		
		   
           (No Camera) 1 (Has Camera)
					  / \
					 2   3c
					/     \
				   4       6
				  /
				 5c
				/
			   7