1345. Jump Game IV
Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.


Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.


Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.


Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.

Approach:
This is a BFS Question rather than a DP question.
It can be solved by DP but the conventional method for this is BFS.
Here we need to find the minimum steps to reach last index.
In each index, we can move to 
type 1: i - 1, 
type 2: i + 1, and 
type 3: arr[j] where i != j and arr[i] == arr[j] i.e any index 
with same value.
Traditional BFS where we keep [index, steps] in the queue; this will require some optimizations to work.
As contraints are (5 * 10^4) length array.
So 1 optimization is to precalculate and store the indexes of a VAL in a hashmap
hashmap[val] = list of indices where val in present
for i, val in hashmap:
	hashmap[val].append(list)
	
This optimization will help optimize type 3 move where instead of traversing through the entire array, 
we will just traverse on the list of indexes where val in present.

Another optimization we need to do is to remove val from hashmap once were traverse through it, coz we are 
maintaining a VISITED set for indexex and not for values, so for eg: [1,1,1,1,1,1,1,2]
Here we will be visiting each and every 1 in the array and store it in queue as all 1 are in different index.
What we need to do here is VISIT 1 only once, so for that;
After we traverse though hashmap for a value to follow type 3: move; we remove val from hashmap
so that we no longer iterate on same value in further iterations.

Solution:
class Solution:
    def minJumps(self, arr: List[int]) -> int:
        n = len(arr)
        queue = deque([[0, 0]])
        visited = set()
        hashmap = defaultdict(list)
        for i, val in enumerate(arr):
            hashmap[val].append(i)
        
        while queue:
            index, step = queue.popleft()
            if index == n - 1:
                return step
            if index in visited: continue
                
            visited.add(index)
            if index > 0:
                queue.append([index - 1, step + 1])
            
            queue.append([index + 1, step + 1])
            
            for i in hashmap[arr[index]]:
                if i != index and arr[i] == arr[index]:
                    queue.append([i, step + 1])
            del hashmap[arr[index]]
        return step
