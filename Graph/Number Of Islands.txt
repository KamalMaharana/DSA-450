Notes:
Given an m x n 2D binary grid grid which represents a map of '1's (land) and 
'0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands 
horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Approach:
Run DFS Whenever you find a "1", and on DFS call, make all conncected "1" to "0"
As all the connected "1" contribute to just 1 Island, so return 1 at the end of DFS. 

Solution:
def dfs(grid, i, j):
        if(i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0'):
            return 0
        grid[i][j] = "0"
        dfs(grid, i+1, j)
        dfs(grid, i, j+1)
        dfs(grid, i-1, j)
        dfs(grid, i, j-1)
        return 1
    
def sol(grid):
    ilands = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if(grid[i][j] == "1"):
                ilands += dfs(grid, i, j)
        
    return ilands
    
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        return sol(grid)
