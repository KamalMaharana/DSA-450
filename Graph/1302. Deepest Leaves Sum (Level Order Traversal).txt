1302. Deepest Leaves Sum
Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:

Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15

Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19


Solution:
This is just level order traversal and get the sum of all nodes in last level.
Level Order Traversal in done using BFS and a for loop on the queue instead of while loop.

Code:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:
        def bfs(start):
            queue = [start]
            while queue:
                size = len(queue)
                level = []
                for i in range(size):
                    node = queue.pop(0)
                    if node.left:
                        queue.append(node.left)
                    
                    if node.right:
                        queue.append(node.right)
                    
                    level.append(node.val)
                
            return sum(level)
        
        return bfs(root)