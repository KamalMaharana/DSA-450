56. Merge Intervals
Given an array of intervals where intervals[i] = [starti, endi], 
merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Approach:
As this is an INTERVAL question, we need to sort the INTERVAL.
In this case we sort it based on START values.
Then we start with 2 intervals
start1, end1 = intervals[0]
then we iterate from 1 to len(intervals) - 1 and check
1. If the interval intersects with the [start1, end1]:
	Two intervals intersects if end1 >= start2: i.e 1st interval ends after 2nd interval starts
	so start1 = min(start1, start2) and end1 = max(end1, end2) so we expand the interval and
	start1 and end1 will always carry the merged interval range
2. If they don't intersect, then we know that from current interval new merging can start
	So we can merge the [start1, end1] as it is the merged interval range.
	then restart the merging from current interval i.e
	start1 = start2 and end1 = end2
	
After loop, we will append [start1, end1] interval to include the final merged interval in the result
	

Solution:
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort()
        start1 = intervals[0][0]
        end1 = intervals[0][1]
        result = []
        for i in range(1, len(intervals)):
            start2, end2 = intervals[i][0], intervals[i][1]
            if end1 >= start2:
                start1 = min(start1, start2)
                end1 = max(end1, end2)
            else:
                result.append([start1, end1])
                start1 = start2
                end1 = end2
        result.append([start1, end1])
        return result