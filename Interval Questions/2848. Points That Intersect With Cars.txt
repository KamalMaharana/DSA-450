You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.

Return the number of integer points on the line that are covered with any part of a car.

 

Example 1:

Input: nums = [[3,6],[1,5],[4,7]]
Output: 7
Explanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.
Example 2:

Input: nums = [[1,3],[5,8]]
Output: 7
Explanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.
 

Constraints:

1 <= nums.length <= 100
nums[i].length == 2
1 <= starti <= endi <= 100


Approach:
Like merge intervals, we want to expand so sort them based on starting value by this way we would get maximum 
coverage.
If we sort them by ending value, we fail to expand the interval
Ex: [[2,3], [5,7], [3,9]]
The above intervals are sorted in ascending order of ending value, but it will fail to add
[3,9] in the interval when we are expanding the existing interval and having the maximum
coverage.

Code:
class Solution:
    def numberOfPoints(self, nums: List[List[int]]) -> int:
        nums.sort()
        print(nums)
        s1 = nums[0][0]
        e1 = nums[0][1]
        result = 0
        for i in range(1, len(nums)):
            s2 = nums[i][0]
            e2 = nums[i][1]
#             Non Overlapping
            if e1 < s2:
                result += (e1 - s1 + 1)
                s1 = s2
                e1 = e2
            else:
                s1 = min(s1, s2)
                e1 = max(e1, e2)
        result += (e1 - s1 + 1)
        return result