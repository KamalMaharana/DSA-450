875. Koko Eating Bananas
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. 
The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of 
bananas and eats k bananas from that pile. If the pile has less than k bananas, 
she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4

Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30

Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23

Approach:
This is BINARY SEARCH on Answer problem.
Low = 1, 1 banana per hour
High = max(piles) i.e every time we eat k = max(piles) bananas, if bananas < k then we eat less banana for 
that hr.
Run a Binary Search on LOW to HIGH
As we are considering the middle value for evaluation, while loop is low <= high
k = (low + high) // 2
if isPossibleToEat(k) bananas:
	result = min(result, k)
	Then we try to find the minimum in LEFT half of search space
	high = mid - 1
else:
	low = mid + 1

return result

Solution:
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def isPossible(k):
            count = 0
            for bananas in piles:
                count += ceil((bananas)/k)
            return count <= h
        
        low = 1
        high = max(piles)
        if h == len(piles): return high
        s = sum(piles)
        result = float('inf')
        while low <= high:
            mid = (low + high)//2
            if isPossible(mid):
                result = min(result, mid)
                high = mid - 1
            else:
                low = mid + 1
        return result