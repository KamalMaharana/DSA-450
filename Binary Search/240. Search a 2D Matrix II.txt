240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. 
This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

Example 1:

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false


Approach:
1. Sub Optimal: TC = O(rows * log(columns))
Run Binary Search on every valid row.
for each row, check
	if row[0] <= target <= row[last]:
		if binarySearch(row): return True
		
Code:
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return False
        def binarySearch(arr, target):
            left = 0
            right = len(arr)-1
            while left < right:
                mid = (left + right)//2
                if arr[mid] == target:
                    return True
                elif arr[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return arr[left] == target
                    
        for row in matrix:
            if row[0] <= target <= row[len(row)-1]:
                print(row)
                if binarySearch(row, target) == True:
                    return True
        return False