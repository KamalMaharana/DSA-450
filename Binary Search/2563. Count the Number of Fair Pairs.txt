Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.

A pair (i, j) is fair if:

    0 <= i < j < n, and
    lower <= nums[i] + nums[j] <= upper

 

Example 1:

Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6
Output: 6
Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).

Example 2:

Input: nums = [1,7,9,2,5], lower = 11, upper = 11
Output: 1
Explanation: There is a single fair pair: (2,3).

 

Constraints:

    1 <= nums.length <= 105
    nums.length == n
    -109 <= nums[i] <= 109
    -109 <= lower <= upper <= 109

Approach:
To solve this problem efficiently, you can follow these steps:

Approach
1. Sort the Array: Start by sorting nums. Sorting helps in using a two-pointer or binary search approach to quickly find pairs that sum up to values within the range [lower, upper].

2. Two-Pointer Technique: For each number nums[i] in the sorted array, use a two-pointer approach (or binary search) to find the range of values in nums that, when added to nums[i], produce a sum between lower and upper.

3. Count Valid Pairs: For each nums[i], calculate the range of indices j (where i < j) such that lower <= nums[i] + nums[j] <= upper. This can be done efficiently using binary search to find the smallest and largest indices j where nums[i] + nums[j] is within bounds.


Solution:
class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        # Sort the array to apply the two-pointer/binary search technique
        nums.sort()
        n = len(nums)
        count = 0

        # Loop through each element and find the valid range of pairs
        for i in range(n - 1):
            # Find the range of indices j > i such that lower <= nums[i] + nums[j] <= upper
            min_j = bisect_left(nums, lower - nums[i], i + 1, n)
            max_j = bisect_right(nums, upper - nums[i], i + 1, n) - 1

            # Add the number of valid pairs for this index i
            if min_j <= max_j:
                count += (max_j - min_j + 1)

        return count