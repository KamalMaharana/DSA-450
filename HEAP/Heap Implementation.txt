class Heap:
    def __init__(self):
        self.size = 0
        self.heap = []
    
    def swap(self, index_1: int, index_2: int) -> None:
        self.heap[index_1], self.heap[index_2] = self.heap[index_2], self.heap[index_1]
    
    def getLeftChildIndex(self, parentIndex: int) -> int:
        return 2 * parentIndex + 1
    
    def getRightChildIndex(self, parentIndex: int) -> int:
        return 2 * parentIndex + 2
    
    def getParentIndex(self, childIndex: int) -> int:
        return (childIndex - 1)//2
    
    def hasLeftChild(self, index: int) -> bool:
        return self.getLeftChildIndex(index) < self.size
    
    def hasRightChild(self, index: int) -> bool:
        return self.getRightChildIndex(index) < self.size
    
    def hasParent(self, index: int) -> int:
        return self.getParentIndex(index) >= 0
    
    def leftChild(self, index: int) -> int:
        return self.heap[self.getLeftChildIndex(index)]
    
    def rightChild(self, index: int) -> int:
        return self.heap[self.getRightChildIndex(index)]
    
    def parent(self, index: int) -> int:
        return self.heap[self.getParentIndex(index)]
    
    def peek(self) -> int:
        if self.size == 0:
            return float('inf')
        return self.heap[0]
    
    def pop(self) -> int:
        if self.size == 0:
            return float('inf')
        result = self.heap[0]
        self.heap[0] = self.heap.pop()
        self.size -= 1
        self.heapifyDown()
        return result
    
    def push(self, val: int) -> None:
        self.heap.append(val)
        self.size += 1
        self.heapifyUp()
    
    def heapifyUp(self):
        index = self.size - 1
        # Swap value until Parent becomes less than child
        while self.hasParent(index) and self.parent(index) > self.heap[index]:
            self.swap(self.getParentIndex(index), index) # Swap current value with its parent
            index = self.getParentIndex(index)
        
    
    # When we remove ROOT, we temporarily swap it with last element in the HEAP array.
    # Then call this heapifyDown method to ROOT down if it is greater than any child
    # To replace root, we need to replace it with the smallest child i.e child with lowest value(For MIN HEAP)
    # We iteratively, find the lowest value child(it will be either LEFT or RIGHT); 
    # check if the lowest value is greater than current value; if YES then break
    # Else, swap it with current value and change current = lowest value child
    def heapifyDown(self):
        index = 0
        while self.hasLeftChild(index):
            smallerChildIndex = self.getLeftChildIndex(index)
            if self.hasRightChild(index) and self.rightChild(index) < self.leftChild(index):
                smallerChildIndex = self.getRightChildIndex(index)
            
            if self.heap[index] < self.heap[smallerChildIndex]:
                break
            else:
                self.swap(smallerChildIndex, index)
            
            index = smallerChildIndex
    
    def __str__(self):
        result = str(self.heap)
        return result
            

h = Heap()
arr = [4,3,6,7,9,3]
for n in arr:
    h.push(n)

print(h)
print(h.pop())
print(h)
print(h.pop())
print(h)
print(h.pop())
print(h)