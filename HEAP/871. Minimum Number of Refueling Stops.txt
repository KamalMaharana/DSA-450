871. Minimum Number of Refueling Stops
A car travels from a starting position to a destination which is target miles east of the starting position.

There are gas stations along the way. The gas stations are represented as an array stations 
where stations[i] = [positioni, fueli] indicates that the ith gas station is 
positioni miles east of the starting position and has fueli liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. 
It uses one liter of gas per one mile that it drives. When the car reaches a gas station, 
it may stop and refuel, transferring all the gas from the station into the car.

Return the minimum number of refueling stops the car must make in order to reach its destination. 
If it cannot reach the destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. 
If the car reaches the destination with 0 fuel left, it is still considered to have arrived.

 

Example 1:

Input: target = 1, startFuel = 1, stations = []
Output: 0
Explanation: We can reach the target without refueling.
Example 2:

Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can not reach the target (or even the first gas station).
Example 3:

Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: We start with 10 liters of fuel.
We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.
Then, we drive from position 10 to position 60 (expending 50 liters of fuel),
and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.
We made 2 refueling stops along the way, so we return 2.
 

Constraints:

1 <= target, startFuel <= 10^9
0 <= stations.length <= 500
0 <= positioni <= positioni+1 < target
1 <= fueli < 10^9


Approach:
Best Explanation: https://leetcode.com/problems/minimum-number-of-refueling-stops/discuss/2451321/Python96Pretend-we-can-Time-Travel-or-heap-with-explantion-or-Best-solution-or-easy-understand

Here's how the code work:

We loop throught every stations, get its position and how much gas that station has.
dis is the distance between current position and next station.
miss is how many gas we have missed.(We don't refuel at every station.)
We use if fuel < dis: to check if the car's fuel is enough to drive to that station.
Image the car keep driving forward until it runs out of fuel. (`fuel < dis')
Once the car is out of fuel, we check what is in miss.
We simply grab the biggest number in miss using heapq.heappop.
One refuel, we add 1 to cnt.
If we already add everything in miss to our fuel, the car still cannot drive to the next station, we return -1.
After the loop, the car is at its destination, so we can return cnt.
(cnt is the answer which is how many time we refuel.)

Code:
class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        stations.append([target, 0])    # regard target as a station
        fuel = startFuel
        cnt, prev = 0, 0
        miss = []
        
        for pos, gas in stations:
            dis, prev = pos - prev, pos    # calculate the distance between two stations
            
            if fuel < dis:  # we are running out of fuel
                
                while miss and fuel < dis:  # use Time machine to get some fuel we missed~
                    fuel += -heapq.heappop(miss)
                    cnt += 1    # cnt is how many times we travel back to get gas
                    
                if fuel < dis: return -1    # we have used all the gas, but still cannot get to the next station
                
            fuel -= dis
            heapq.heappush(miss, -gas)  # we don't need the gas until we run out of all fuel
            
        return cnt

