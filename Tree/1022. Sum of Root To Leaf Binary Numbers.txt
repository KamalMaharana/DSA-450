1022. Sum of Root To Leaf Binary Numbers
You are given the root of a binary tree where each node has a value 0 or 1. 
Each root-to-leaf path represents a binary number starting with the most significant bit.

For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.
For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. 
Return the sum of these numbers.

The test cases are generated so that the answer fits in a 32-bits integer.

Example 1:

Input: root = [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

Example 2:

Input: root = [0]
Output: 0

Approach:
This is a SIMPLE root -> leaf DFS problem.
The major thing is keeping forming the binary.
In PYTHON, at each dfs call we can append the number as String to a recursive passing variable and at leaf
we get the number using bin(s).replace("0b", "") but this is a PYTHON hack.
Universal way is to use BIT MANIPULATION
if node.val == 1:
	binary = (binary << 1) + 1  i.e Shift left by 1 and add 1 at the end
else:
	binary = (binary << 1) i.e Shift left by 1 which will add 0 by default shift

Be carefull that we cannot add to result when
node == None.
coz this may result in double counting as for a leaf node, it's LEFT and RIGHT == NONE, 
so we might do double count for LEFT empty and RIGHT empty.
So just keep looking of leaf and return from leaf.
	
Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumRootToLeaf(self, root: Optional[TreeNode]) -> int:
        self.sums = 0
        def dfs(node, binary):
            if node and not node.left and not node.right:
                if node.val:
                    binary = (binary << 1) + 1
                else:
                    binary = (binary << 1)
                self.sums += binary
                return
            if node.val:
                binary = (binary << 1) + 1
            else:
                binary = (binary << 1)
            
            if node.left:
                dfs(node.left, binary)
            if node.right:
                dfs(node.right, binary)
        dfs(root, 0)
        return self.sums
            

	
	