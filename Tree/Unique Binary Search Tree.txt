Note:
This is DP on trees problem.
Here; for a node i we can have 1 -> i - 1 nodes in LEFT and  i to N in RIGHT subtree.
So number of subtree doesn't depend on the VALUE of NODES.
So if N = 5
1st we put 1 as root, which means all the other values i.e 2,3,4,5 go to RIGHT Subtree.
2nd we put 2 as root, so 1 goes to LEFT and 3,4,5 go to right
And so on.
So if N = 2, we can have 2 unique trees regardless of their values.
Therefore the formula comes out to be
for root in N:
	result += recursion(root - 1) * recursion(N - root)
IN iterative we get
for i -> 2 to N:
	for j in [1 to i]:
		dp[root] += dp[j - 1] * dp[i - j]
So here we are 1st doing for N = 2, then N = 3 
It's bottom up so from N = 1 to N = N.
Good Explanation:
https://leetcode.com/problems/unique-binary-search-trees/discuss/1565543/C%2B%2BPython-5-Easy-Solutions-w-Explanation-or-Optimization-from-Brute-Force-to-DP-to-Catalan-O(N)

Solution:

1. Recursive DP:
class Solution:
    def numTrees(self, n: int) -> int:
        dp = [-1 for i in range(n + 1)]
        def dfs(n):
            if n <= 1:
                return 1
            if dp[n] != -1:
                return dp[n]
            
            res = 0
            for i in range(1, n+1):
                res += dfs(i - 1) * dfs(n - i)
            
            dp[n] = res
            return dp[n]
        
        return dfs(n)


2. Iterative Top Down DP
class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0 for i in range(n + 1)]
        dp[0] = dp[1] = 1
        
        for i in range(2, n + 1):
            for j in range(1, i + 1):
                dp[i] += dp[j - 1] * dp[i - j]
        
        return dp[n]