701. Insert into a Binary Search Tree
You are given the root node of a binary search tree (BST) and a value to insert into the tree. 
Return the root node of the BST after the insertion. 
It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, 
as long as the tree remains a BST after insertion. You can return any of them.

Example 1:

Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
Explanation: Another accepted tree is:

Example 2:

Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]

Example 3:

Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]

Approach:
Here we use the simple BST property.
We append the new value at the END.
if val < node.val:
	Then the "val" will be in LEFT half
	node.left = insert(node.left, val)
else:
	"val" will be in RIGHT half.
	node.right = insert(node.right, val)

if node == None:
	this means we found a free and correct place.
	we return TreeNode(val)

While returning, we would either modify left or right subtree of NODES.
So we assign it back to it
REMEMBER this for BST questions
	node.left = insert(node.left, val)
	node.right = insert(node.right, val)
	
Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        
        def insert(node, val):
            if not node:
                return TreeNode(val)
            
            if val < node.val:
                node.left = insert(node.left, val)
            else:
                node.right = insert(node.right, val)
            
            return node
        
        return insert(root, val)