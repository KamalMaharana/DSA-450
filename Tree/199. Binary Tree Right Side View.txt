Given the root of a binary tree, imagine yourself standing on the right side of it, 
return the values of the nodes you can see ordered from top to bottom.

Example 1:

Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Approach:
This is a BFS question.
As we know BFS is used for level order traversal, so here we can observe that right view is 
nothing but the last node of that level from left to right
As in BFS, we move left to right, we can do that same thing here and as soon as we are at the last node
of that level, then we can add it to out result list.

This is a classic implementation of FOR loop in BFS, using FOR loop, we get the entire level, 
and the last index in that FOR loop will be the rightmost NODE.


Code:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        queue = [root]
        result = []
        while queue:
            l = len(queue)
            for i in range(l):
                node = queue.pop(0)
                if i == l - 1 and node:
                    result.append(node.val)
                if node and node.left:
                    queue.append(node.left)
                if node and node.right:
                    queue.append(node.right)
            
        return result