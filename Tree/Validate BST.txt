98. Validate Binary Search Tree
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
 
Example 1:

Input: root = [2,1,3]
Output: true

Example 2:

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-2^31 <= Node.val <= 2^31 - 1


Approach:
This is basic DFS, here we need to keep track of 2 values, mini and maxi
mini will indicate minimum up until current node in the subtree.
maxi will indicate maximum up until current node in the subtree.
While recursion, we will check
if root.val <= maxi:
	which means in right subtree, we know that
	root < children.
	So if the above condition is True, that means it is violating BST property, 
	so we return False.

Another condition to check, this is for left subtree
if root.val >= mini:
	As in left subtree, root > children.
	Then if the above condition is True
	this violates BST, so we return False.

	
As we are operating Left and Right subtree in same DFS.
if we are looking in left subtree, we dont need mini, so we keep it mini = float('inf')
Similarly for right subtree, we only need mini and not maxi, so we keep maxi = float('-inf')

Code:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        
        def dfs(node, mini, maxi):
            if not node:
                return True
            
            if node.val <= maxi or node.val >= mini:
                return False
            
            return dfs(node.left, min(mini, node.val), maxi) and dfs(node.right, mini, max(node.val, maxi))
        
        return dfs(root, float('inf'), float('-inf'))
            
        








