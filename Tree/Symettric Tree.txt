Question:
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
tree:         1
            / | \
		   2  |  2
		  / \ | / \
		 4   3|3   4

Input: root = [1,2,2,3,4,4,3]
Output: true

Approach:
As you can see, mirror means left becomes right and right becomes left
So the idea here is, check left with right.
So 1st check for all "None" cases, where left and/or right is None.
Then check if values are equal or not.
Then 
we check left child of LEFT with right child or RIGHT
and
check right child of LEFT with left child of RIGHT.

Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        def mirror(left, right):
            if left == None and right == None: return True
            if (left == None and right != None) or (left != None and right == None): return False
            if left.val != right.val: return False
            return mirror(left.left, right.right) and mirror(left.right, right.left)
                
        return root == None or mirror(root.left, root.right)
