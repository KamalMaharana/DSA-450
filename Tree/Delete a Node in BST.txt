Notes:
Follow Striver's Delete Node in BST Video.
Here I have used modified version of Striver's method.
There is another method as well where we copy value to deleted node and then repeat 
the same until we get to a leaf node.
In Striver's way, we reach the required node; 
then If we can replace it with it's RIGHT or LEFT child.
Consider "req_node" as the node to be deleted
If RIGHT; then we have to attach the LEFT child in the RIGHT Subtree
If LEFT; then we have to attach the RIGHT child in LEFT Subtree
If we replace the node with RIGHT child then do the following.
	1. Find the smallest value in RIGHT subtree and store in "right_child".
	2. Then we attach the left subtree to the above found "right_child.left"
	   Because all values in the "right_child" is greater that left subtree.
	   We do this by rightChild.left = req_node.left(left subtree)
If we replace the node with LEFT Child then:
	1. Find the LARGEST on LEFT subtree and store in "left_child"
	2. Attach the RIGHT Tree of "req_node" to right of "left_child" that we
	   found above, because leftChild.val < right child of req_node ka value
	   As BIG goes to right in BST so left_child.right = req_node.right(Right Tree)

In this case, I am replacing it with RIGHT CHILD, so I have to get Smallest in RIGHT
Subtree.

Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getSmallest(self, root):
        while root.left: 
            root = root.left
        return root
    
    def getReplacementNode(self, root):
        if not root.right: return root.left
            
        if not root.left: return root.right

        if root.left and root.right:
            leftChild = root.left
            rightSmallest = self.getSmallest(root.right)
            rightSmallest.left = leftChild
            return root.right
        
        return root.right

    def deleteNode(self, root, key):
        if not root: return None
        
        if root.val == key:
            return self.getReplacementNode(root)

        elif root.val > key:
            root.left = self.deleteNode(root.left, key)
        else:
            root.right = self.deleteNode(root.right, key)
            
        return root