452. Minimum Number of Arrows to Burst Balloons
There are some spherical balloons taped onto a flat wall that represents the XY-plane. 
The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] 
denotes a balloon whose horizontal diameter stretches between xstart and xend. 
You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from 
different points along the x-axis. A balloon with xstart and xend is burst by 
an arrow shot at x if xstart <= x <= xend. There is no limit to the number of 
arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.


Example 1:
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].

Example 2:
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.

Example 3:
Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].

Approach:
This is a GREEDY problem similar to MERGE INTERVALS.
But the question is, do we need to sort this based on START or END?
As we have only 2 options, ideally we can dry run using both sort.
Interestingly, this problem can be solved in both sorting ways.
If we sort based on START, then
In this case if 2 intervals overlap, then we would require the COMMON AREA that covers both intervals.
Like INTERSECTION of 2 area
[1, 5], [2, 7]
COMMON AREA for above 2 intervals are [max(1,2), min(5,7)] = [2,5]
if end of previous interval <= start of next interval:
	This means they are overlapping so
	curr = [max(curr[0], points[i][0]), min(curr[1], points[i][1])]
else:
	they are not overlapping
	count += 1
    curr = points[i]


If we sort on END values:
if end of previous interval < start of current interval:
	this means they are not overlapping so, 
	count += 1
	curr = points[i]

Solution:
1. Sort based on START values
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        n, count = len(points), 1
        if n == 0: return 0
        
        # Sorting based on START value
        points.sort()
        curr = points[0]
        
        for i in range(1, n):
            if curr[1] >= points[i][0]:
                curr = [max(curr[0], points[i][0]), min(curr[1], points[i][1])]
            else:
                count += 1
                curr = points[i]
        return count
2 Sort based on END values
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort(key = lambda x: x[1])
        n, count = len(points), 1
        if n == 0: return 0
        curr = points[0]
        
        for i in range(1,n):
            if curr[1] < points[i][0]:
                count += 1
                curr = points[i]
                
        return count