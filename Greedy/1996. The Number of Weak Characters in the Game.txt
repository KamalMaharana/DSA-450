1996. The Number of Weak Characters in the Game
You are playing a game that contains multiple characters, and each of the characters has two main properties: 
attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] 
represents the properties of the ith character in the game.

A character is said to be weak if any other character has both attack and defense levels strictly 
greater than this character's attack and defense levels. More formally, a character i is said to be 
weak if there exists another character j where attackj > attacki and defensej > defensei.

Return the number of weak characters.

 
Example 1:

Input: properties = [[5,5],[6,3],[3,6]]
Output: 0
Explanation: No character has strictly greater attack and defense than the other.

Example 2:

Input: properties = [[2,2],[3,3]]
Output: 1
Explanation: The first character is weak because the second character has a strictly greater attack and defense.

Example 3:

Input: properties = [[1,5],[10,4],[4,3]]
Output: 1
Explanation: The third character is weak because the second character has a strictly greater attack and defense.


Approach:
This is a greedy problem.
This problem requires us to sort the given array in a particular way to get the result.
Here we know that both attack and defence of any upcoming character has to be greater than current character so 
that current character can be called as weak character.
If we sort the array in reverse order of attack and in increasing order of defence
i.e If 2 attack of 2 characters are same then the 1 with lowest defence will be first.
sort.array(key: lambda x: (-x[0], x[1]))

Then loop through the array:
for _, d in properties:
            if d < curr_max:
                ans += 1
            else:
                curr_max = d
				
So as the array defence is sorted in ascending order, then 2 consecutive characters with same attack
will have defence1 <= defence2
This means, that d < curr_max will only happen when attack1 > attack 2 and defence1 > defence2
attack1 > attack2 is ensured due to sorting.
Then we will only check prev_defence > curr_defence.

Code:
class Solution:
    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:
        properties.sort(key=lambda x: (-x[0],x[1]))
        ans = 0
        curr_max = 0
        
        for _, d in properties:
            if d < curr_max:
                ans += 1
            else:
                curr_max = d
        return ans






