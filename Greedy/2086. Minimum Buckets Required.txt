Notes:
2086. Minimum Number of Buckets Required to Collect Rainwater from Houses
You are given a 0-indexed string street. Each character in street is either 'H' 
representing a house or '.' representing an empty space.

You can place buckets on the empty spaces to collect rainwater that falls from the 
adjacent houses. The rainwater from a house at index i is collected if a bucket is 
placed at index i - 1 and/or index i + 1. 
A single bucket, if placed adjacent to two houses, can collect the rainwater from 
both houses.

Return the minimum number of buckets needed so that for every house, 
there is at least one bucket collecting rainwater from it, or -1 if it is impossible.

Approach:
When current index == H
then we can place in i + 1 or i - 1
So greedly we choose i + 1, because assuming that the pattern could be
H . H _
i

So here we are at i and we could have above pattern when i moves forward, so thats why
we greedily choose i + 1 as 1st possible move.
So after this we move to i += 3 because we won't care what between i and i + 3 
because we have already dealt with it.
If not i + 1 == "."
then i - 1, and increment i += 1
If not then return -1

Solution:
class Solution:
    def minimumBuckets(self, street: str) -> int:
        ans = 0
        n = len(street)
        i = 0
        while i < n:
            if street[i] == "H":
                if i + 1 < n and street[i + 1] == ".":
                    ans += 1
                    i += 3
                    continue
                if i - 1 >= 0 and street[i - 1] == ".":
                    ans += 1
                    i += 1
                    continue
                return -1
            i += 1
        return ans