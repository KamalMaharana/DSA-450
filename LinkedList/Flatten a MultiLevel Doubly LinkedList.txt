Note: 
In this we have to use Iterative DFS.
As here if we find a child, we need to move and explore the child, then
return back to parent and explore.
This means we need to go in depth in 1 path, explore it completely, then 
comeback and explore the previous path.
This is similar to DFS in Graph were we 1st go deep in 1 direction, then
comeback to parent and explore other direction.
Here we use STACK instead of recursion to perform DFS.
Recursion looks like this:

def pre(head):
            if head:
                nonlocal result
                result.append(head.val)
                pre(head.child)
                pre(head.next)


Here Until stack is empty, we perform the operation
We carry a dummy node named as curr with us which acts as a PROXY HEAD.
1. We pop from stack.
2. Then we append it's next to stack.
3. Then we append it's CHILD to stack so that the next time we pop, 
   we explore the child 1st.
4. after this, we make the connection as follows
curr.next = poppedNode; 
poppedNode.prev = curr;
curr = poppedNode;
				

Solution:
Intuitive Solution:
"""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution:
    def flatten(self, head: 'Node') -> 'Node':
        if not head: return head
        stack, order = [head], []

        while stack:
            last = stack.pop()
            order.append(last)
            if last.next:
                stack.append(last.next)
            if last.child:
                stack.append(last.child)
        
        n = len(order)
        for i in range(0, n - 1):
            order[i+1].prev = order[i]
            order[i].next = order[i+1]
            order[i].child = None
            
        return order[0]


Space Efficient Solution:

class Solution(object):
    def flatten(self, head):
        if not head: return head
        
        dummy = Node(0)
        curr, stack = dummy, [head]
        while stack:
            last = stack.pop() 
            if last.next:
                stack.append(last.next)
            if last.child:
                stack.append(last.child)
            curr.next = last
            last.prev = curr  
            last.child = None
            curr = last
        
        res = dummy.next
        res.prev = None
        return res