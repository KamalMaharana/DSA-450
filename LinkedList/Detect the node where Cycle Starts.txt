142. Linked List Cycle II
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be 
reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer 
is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:

Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:

Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.

Approach:
This is a STANDARD ALGORITHM that we need to REMEMBER.
Detect cycle using Floyd Hare - Tortoise method, slow and fast pointer.
if slow == fast: that means there is cycle so break, else keep iterating while fast and fast.next:

if slow != None and (fast = None or fast.next == None): means that there is no cycle and fast pointer has reached 
the END of the LinkedList, so just return

If there is a cycle then
have a new pointer START = head
then go 1 step at a time
while start != fast:
	start = start.next 
	fast = fast.next 

Then after this, it is GUARANTEED that at that at common point we will find the Node where CYCLE will start.

Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head: return
        
        slow = head
        fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if fast == slow:
                break
            
        if slow != None and (fast == None or fast.next == None):
            return
            
        start = head
        while start != fast:
            start = start.next
            fast = fast.next
        
        return start