234. Palindrome Linked List
Given the head of a singly linked list, return true if it is a palindrome.

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9


Approach:
This was asked in Carwale Interview.
You can use space to make this a standard palindrome question.
To optimize space,
1. Get the middle
2. Revere the LinkedList from middle to end
3. Then check it like standard palindrome question

Code:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        def getMiddle(head):
            slow = head
            fast = head
            while fast.next and fast.next.next:
                slow = slow.next
                fast = fast.next.next
            if fast:
                return slow.next
            return slow
        
        def reverse(head):
            prev = None
            curr = head
            while curr:
                nex = curr.next
                curr.next = prev
                prev = curr
                curr = nex
            return prev
        
        middle = getMiddle(head)
        start = reverse(middle)
        while start:
            if start.val != head.val:
                return False
            start = start.next
            head = head.next
        return True
               