413. Arithmetic Slices
An integer array is called arithmetic if it consists of at least three elements 
and if the difference between any two consecutive elements is the same.

For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.
Given an integer array nums, return the number of arithmetic subarrays of nums.

A subarray is a contiguous subsequence of the array.


Example 1:

Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.

Example 2:

Input: nums = [1]
Output: 0

Approach:
This can be solved using Dynamic Programming.
We can get the hint that it uses DP is from following statement
"return the number of arithmetic subarrays of nums."
As it says "number of something", thats when we should know it's DP 
of variant LIS i.e Longest Increasing Subsequence
i.e 1D array DP left to right, dp[i] states the number of artihmetic subarray ending at i'th index.

dp = [0] * len(nums)
if nums[i-1] - nums[i-2] == nums[i] - nums[i-1]:
	dp[i] = dp[i-1] + 1

ans += dp[i]


Solution:
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        if len(nums) < 3:
            return 0
        n = len(nums)
        dp = [0] * n
        ans = 0
        for i in range(2, n):
            if nums[i-1] - nums[i-2] == nums[i] - nums[i-1]:
                dp[i] = dp[i-1] + 1
            ans += dp[i]
        return ans