Q. https://leetcode.com/problems/largest-plus-sign/
Difficulty: Medium
class Solution:
    def getLeft(self, mines, n):
        dp = [[1 for j in range(n)] for i in range(n)]
        for i in range(n):
            for j in range(n):
                if mines[i][j] == 0:
                    dp[i][j] = 0
                elif j > 0 and mines[i][j] == 1 and mines[i][j - 1] == 1:
                    dp[i][j] = dp[i][j-1] + 1
        return dp
    
    def getRight(self, mines, n):
        dp = [[1 for j in range(n)] for i in range(n)]
        for i in range(n-1, -1, -1):
            for j in range(n-1, -1, -1):
                if mines[i][j] == 0:
                    dp[i][j] = 0
                elif j < n - 1 and mines[i][j] == 1 and mines[i][j + 1] == 1:
                    dp[i][j] = dp[i][j + 1] + 1
        return dp
    
    def getTop(self, mines, n):
        dp = [[1 for j in range(n)] for i in range(n)]
        for j in range(n):
            for i in range(n):
                if mines[i][j] == 0:
                    dp[i][j] = 0
                elif i > 0 and mines[i][j] == 1 and mines[i - 1][j] == 1:
                    dp[i][j] = dp[i - 1][j] + 1
        return dp
    def getBottom(self, mines, n):
        dp = [[1 for j in range(n)] for i in range(n)]
        for j in range(n - 1, -1, -1):
            for i in range(n - 1, -1, -1):
                if mines[i][j] == 0:
                    dp[i][j] = 0
                elif i < n - 1 and mines[i][j] == 1 and mines[i + 1][j] == 1:
                    dp[i][j] = dp[i + 1][j] + 1
        return dp
    
    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:
        grid = [[1 for j in range(n)] for i in range(n)]
        for x, y in mines:
            grid[x][y] = 0
        top, right, bottom, left = self.getTop(grid, n), self.getRight(grid, n), self.getBottom(grid, n), self.getLeft(grid, n)
        result = 0
        for i in range(n):
            for j in range(n):
                curr = min(top[i][j], right[i][j], bottom[i][j], left[i][j])
                result = max(result, curr)
        return result