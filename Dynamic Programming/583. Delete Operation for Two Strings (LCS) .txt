Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4
 

Constraints:

1 <= word1.length, word2.length <= 500
word1 and word2 consist of only lowercase English letters.

Approach:
It's basically LONGEST UNCOMMON SUBSEQUENCE
If we look carefully, we can see that we can solve this problem recursively.
recursive relation is 
if w1[i] = w2[j]:
	This means both characters are same so we don't need to delete it.
	solve(i + 1, j + 1)
else:
	This means we either delete from word1 or word2
	By delete means we just skip over that index for each word in each recursive call.
	1 + min(solve(i + 1, j), solve(i, j + 1))

By looking at the recursive relation, we can see that there are mainly 2 changing variables.
So we can have a 2D DP as a cache to solve this problem with acceptable time complexity.
Just add DP dict in front of every computation to make it faster.
Thats the TOP DOWN approach.

For BOTTOM UP approach, it's similar to Longest Common Subsequence (LCS)
Find LCS in Bottom Up.
Then subtract LCS from the length of string to find the length of 
LONGEST UNCOMMON SUSEQUENCE.
Then result = (len(word1) - lcs) + (len(word2) - lcs)


Code:
Top Down:
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m = len(word1)
        n = len(word2)
        dp = {}
        def dfs(i, j):
            if i == m and j == n:
                dp[(i, j)] = 0
                return dp[(i, j)]
            
            if (i, j) in dp:
                return dp[(i, j)]
            
            if i == m or j == n:
                dp[(i, j)] = max(m - i, n - j)
                return dp[(i, j)]
            
            if word1[i] == word2[j]:
                dp[(i, j)] = dfs(i + 1, j + 1)
                return dp[(i, j)]
            
            dp[(i, j)] = 1 + min(dfs(i + 1, j), dfs(i, j + 1))
            return dp[(i, j)]
        dfs(0, 0)
        return dp[(0, 0)]

Bottom UP (JAVA)
public int minDistance(String word1, String word2) {
    int dp[][] = new int[word1.length()+1][word2.length()+1];
    for(int i = 0; i <= word1.length(); i++) {
        for(int j = 0; j <= word2.length(); j++) {
            if(i == 0 || j == 0) dp[i][j] = 0;
            else dp[i][j] = (word1.charAt(i-1) == word2.charAt(j-1)) ? dp[i-1][j-1] + 1
                    : Math.max(dp[i-1][j], dp[i][j-1]);
        }
    }
    int val =  dp[word1.length()][word2.length()];
    return word1.length() - val + word2.length() - val;
}






	
	
	
	
	






