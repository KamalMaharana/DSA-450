1626. Best Team With No Conflicts
You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. 
A conflict exists if a younger player has a strictly higher score than an older player.
A conflict does not occur between players of the same age.

Given two lists, scores and ages, where each scores[i] and ages[i] represents 
the score and age of the ith player, respectively, 
return the highest overall score of all possible basketball teams.


Example 1:
Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.

Example 2:
Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.

Example 3:
Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 

Approach:
This is typical pick and choose DP.
I tried with Top Down DP but it gave TLE.
So got this bottom up approach.
1. Create Players array like Player<age[i], score[i]>
2. Sort this players array based on age.
3. Then run 2 loops for bottom up dp.

Like in current position, if we want to include any previous position or not.
DP will be an array.
dp[i] stores the maximum score that can be obtained when i-th player is included 
and all other players are between indices 0 and i-1.
Like dp[i] is maximum score at that position.

for current position, we check all the previous results and store the maximum for current dp[i]
for i in range(0, N):
	dp[i] = player[i].score 
	(This is because, current value will always be the minimum possible value at that position.)
	for j in range(0, i):
		if player[j].score <= player[i].score:
			dp[i] = max(dp[i], dp[j] + current_score)
	result = max(dp[i], result)

Code:
class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        players = [(ages[i], scores[i]) for i in range(len(scores))]
        players.sort()

        result = 0
        dp = [0] * len(scores)
        for i in range(0, len(scores)):
            dp[i] = players[i][1]
            curr_score = players[i][1]
            for j in range(0, i):
                prev_score = players[j][1]
                if prev_score <= curr_score:
                    dp[i] = max(dp[i], dp[j] + curr_score)
            result = max(result, dp[i])
        
        return result