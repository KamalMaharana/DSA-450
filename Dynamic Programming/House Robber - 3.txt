Notes:
The thief has found himself a new place for his thievery again. 
There is only one entrance to this area, called root.

Besides the root, each house has one and only one parent house. 
After a tour, the smart thief realized that all houses in this place form a binary tree. 
It will automatically contact the police if 
two directly-linked houses were broken into on the same night.

Given the root of the binary tree, 
return the maximum amount of money the thief can rob without alerting the police.

Input: root = [3,2,3,null,3,null,1]
            |3|
			/ \
		   2   3
		    \   \
		    |3| |1|
Output: 7
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

Approach:
Initially we might think that max(sum(odd nodes), sum(even nodes)) this might be the greedy 
way of thinking which is wrong for many cases.
Skipping 1 node won't give correct answer
Because here
         4
		/
	   1
	  /
	 2
	/
   3

  Using ODD-EVEN Node Sum, we get 6 as answer, but the best answer is 7; i.e 4 + 3
So,
This is DP on Trees problem.
Here, the approach is similar to Top-Down DP approach in House Robber 1
Here, the choices are to rob the current node, or not rob the current node.
So here the catch is, if we rob the child, we cannot rob it's parent in the TREE.
So what we do is, we keep a tuple as return type in DFS
tuple[0]: it will store the value if current node is robbed
tuple[1]: it will store the value if current node is not robbed
So we have 2 variables
robbed = node.val + dfs(node.left)[1] + dfs(node.right)[1]; ROB current node/house
not_robbed = max(dfs(node.left)) + max(dfs(node.right))
return (robbed, not_robbed)

Finally, we will get the tuple where
tuple[0]: if root is robbed.
tuple[1]: if root is not robbed
then we take the maximumout of it. 

Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: Optional[TreeNode]) -> int:
        def dfs(node):
            if not node:
                return 0,0
            
            left = dfs(node.left)
            right = dfs(node.right)
            robbed = left[1] + right[1] + node.val
            not_robbed = max(left) + max(right)
            return (robbed, not_robbed)
        return max(dfs(root))