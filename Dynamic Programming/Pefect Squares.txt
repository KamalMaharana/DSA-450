Note: 
This problem is similar to Coin Change.
here dp[i] is minimum number of square required to form 'i'.
So this solution is a bottom up solution.
Iterating over all squares, we use the below relation.
Minimum of current = min(curr - square) + 1

Solution:
class Solution(object):
    def numSquares(self, n):
        perfect_squares = [i * i for i in range(1, int(math.sqrt(n)) + 1)]
        dp = [float("inf") for i in range(n + 1)]
        dp[0] = 0
        dp[1] = 1
        for i in range(2, n + 1):
            for square in perfect_squares:
                dp[i] = min(dp[i], dp[i - square] + 1)
        return dp[-1]