public boolean canPartition(int[] arr) {
        int sum = 0;
        int N = arr.length;
        for(int i = 0; i < N; i++) {
            sum += arr[i];
        }
        if((sum&1) == 1) {
            return false;
        }
        sum = sum/2;
        boolean dp[][] = new boolean[N+1][sum+1];
        
        // Initialization
        for(int i = 0; i < N + 1; i++) {
            for(int j = 0; j < sum + 1; j++) {
                if(j == 0) {
                    dp[i][j] = true;
                }
                else {
                    dp[i][j] = false;
                }
            }
        }
        
        // Actual Dp Solving
        for(int i = 1; i < N + 1; i++) {
            for(int j = 1; j < sum + 1; j++) {
                if(j >= arr[i-1]) {
                    dp[i][j] = dp[i-1][j - arr[i-1]] || dp[i-1][j];
                }
                else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[N][sum];
    }