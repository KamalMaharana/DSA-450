72. Edit Distance
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

Approach:
Refer Neetcode's video explanation for this question.
Remember this pattern:
if characters match, then just move ahead.
if ch1 != ch2:
	insert = dp[i][j + 1]
	This means you have inserted the 'j' character from word2 into word1 but you still have the character 
	at index 'i' in hand, so as you have taken care of 'j' character from word2, just move ahead j + 1
	But as we still have i from word1, keep 'i' as it is (i, j + 1)
	
	delete = dp[i + 1][j]
	You have deleted current character from word1, move ahead. But you cannot move ahead in word2 because
	after deleting current character we don't know if the character in both word is same or not.
	So just move i, not j.
	
	replace = dp[i + 1][j + 1]
	If you replace the character from word1 with character of word2, then move both pointers.
	
Code:
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n1 = len(word1)
        n2 = len(word2)
        if n1 == 0:
            return n2
        elif n2 == 0:
            return n1
        
        cache = [[float('inf') for i in range(n2 + 1)]  for j in range(n1 + 1)]

        for i in range(n1 + 1):
            cache[i][n2] = n1 - i
        
        for j in range(n2 + 1):
            cache[n1][j] = n2 - j

        for i in range(n1 - 1, -1, -1):
            for j in range(n2 - 1, -1, -1):
                ch1 = word1[i]
                ch2 = word2[j]
                if ch1 == ch2:
                    cache[i][j] = cache[i + 1][j + 1]
                else:
                    insert = cache[i][j + 1]
                    delete = cache[i + 1][j]
                    replace = cache[i + 1][j + 1]
                    cache[i][j] = 1 + min(insert, delete, replace)
        return cache[0][0]




