Question:
You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

 

Example 1:

Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
Output: 2
Explanation: Strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'.

Example 2:

Input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]
Output: 7
Explanation: All strings are consistent.

Example 3:

Input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]
Output: 4
Explanation: Strings "cc", "acd", "ac", and "d" are consistent.

Approach:
So here we create a mask of allowed (target)
And we just have to check if set bits of target matches with set bits of words.
1. Create mask for target, logic (bitmask |= (1 << digit))
2. For each word, create mask and check
if (target & word) == word: then it matches and increment count.


Code:
class Solution:
    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:
        def create_bitmask(s: str) -> int:
            bitmask = 0
            
            for char in s:
                # Convert character to integer (e.g., '0' -> 0, '1' -> 1, ..., '9' -> 9)
                digit = ord(char) - ord('a')  + 1
                # Set the corresponding bit in the bitmask
                bitmask |= (1 << digit)
            
            return bitmask
        tg = create_bitmask(allowed)
        c = 0
        for w in words:
            mask = create_bitmask(w)
            if (tg & mask) == mask:
                c += 1
        return c