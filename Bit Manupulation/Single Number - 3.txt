Note:
Here we have 2 elements repeating once and other elements repeating twice.
So we take XOR of all the numbers.
XOR of 2 same numbers == 0
So after XOR on the array, final we get a number i.e (X xor Y)
X xor Y means there is atleast 1 bit in both the numbers that is different.
So to get the rightmost SET bit which is the difference maker here we do the following
rightBit = all_xor & (-all_xor)
-ve of all_xor is 2's complement of all_xor.
2's complement if == (1's complement + 1) i.e invert the bit value and add 1 to it.
After getting the right most set bit of all_xor;
we traverse thru the array again and check 
if (rightBit & nums[i]) == 1; i.e the i'th bit of nums[i] is set or not because this
num could be 1 of the 2 required answers.
IF above condition satisfies, then we have X = X ^ nums[i] so that if nums[i] repeat
2 times which, it will get eliminated from XOR, if it is repeating once then it's the
required answer.
ELSE:
	Y = Y ^ nums[i]
	This means this bit is not set and it could be a valid candidate for Y
As IF i'th bit in X == 1 and Y != 1 the (X xor Y) > 0

Ex:
1,2,1,2,3,5
1 = 001
2 = 010 XOR = 001(1) ^ 010(2)       = 011
1 = 001 XOR = prev_XOR 011 ^ 001(1) = 010
2 = 010 XOR = 000
3 = 011 XOR = 011
5 = 101 XOR = 110
Final XOR = 110
rightMostSetBit = 110 & 010(2's Complement) = 010
So for X, the candidates who have 2nd bit == 1 are 2, 2, 3
And for Y, the candidates who have 2nd bit == 0 are 1, 1, 5
So XOR of 2,2,3 == 3
And XOR of 1,1,5 == 5



Solution:
class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        all_xor = 0
        for i in nums:
            all_xor = all_xor ^ i
        
        rightmost_set_bit = all_xor  & (-all_xor)
        x = 0
        y = 0
        
        for i in nums:
            if rightmost_set_bit & i:
                x ^= i
            else:
                y ^= i
        
        return [x, y]