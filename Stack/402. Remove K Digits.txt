402. Remove K Digits
Given string num representing a non-negative integer num, and an integer k, 
return the smallest possible integer after removing k digits from num.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


Approach:
I got to know this approach after looking at the tags in discussion section.
It's a STACK and GREEDY solution, similar to Next Greater Element.
We have a stack, and from it we need to remove 1st K decreasing digits.
That is we need to have result in increasing order, i.e prev <= curr
for n in nums:
	while k and stack and stack[top] < n:
		stack.pop()
		k -= 1
	stack.append(n)

Remove all prefix 0 if any.
Then join the values stored in stack to form the result in string format.
Even after going through the array, you still have k != 0
this means that we need to remove more digits.
So just pop values from stack until k != 0, coz stack is already in increasing order, 
so poping from behind will always pop bigger digit, so greedly we acheive the answer.

Solution:
class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        stack = []
        temp = k
        for i in num:
            while k and stack and stack[-1] > i:
                stack.pop()
                k -= 1
            stack.append(i)
        while k:
            stack.pop()
            k -= 1
        res = "".join(stack)
        res = res.lstrip("0")
        if len(res):
            return res
        return "0"









