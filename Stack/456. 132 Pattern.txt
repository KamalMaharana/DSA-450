Question:
Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

 

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


Approach:
This problem is solved using MONOTONIC Stack, Stack that is maintained to store values in 
increasing or decreasing order.
In this case, we need to maintain stack in decreasing order, that is Smallest Value on top of stack.
Here as we need to find i,j,k such that i < k < j
Value in stack is k, current value is j and 2nd value in stack is i
We will maintain stack in decreasing order
stack will be pair of values [num, left_min]
where left_min is the value which is lesser than current value and is to the left of current value.
Like keeping running minimum, but we need to keep it for every value.
Either we can keep another array called min_left where min_left[i] = Minimum value in left of 'i'
or just have this value in the stack by storing pair in stack like we are.

As 1st value cannot be a candidate for j or k, we start our iteration from index = 1
Now iterate through the stack starting from index = 1 to end

So for maintaining decreasing stack 
	while stack and n >= stack[-1][0]:
		stack.pop()

	By this we will make sure that if there are any value in stack, it's greater than current value
	As value in stack are previous value, and if previous value is greater than current value.
	Then its 'j' and current value becomes 'k' and 2nd value in stack becomes 'i' automatically.
	so,
	if stack and stack[top][1] < n:
		return True
	
	if not then just append on stack and update the curMin
	curMin = min(curMin, n)
	




Solution:
class Solution:
    def find132pattern(self, nums: List[int]) -> bool:
        # Stack is pair [num, min_on_left]
        stack = []
        curMin = nums[0]
        
        for n in nums[1:]:
            # Pop all the values greater than equal to current value
            while stack and n >= stack[-1][0]:
                stack.pop()
            
            # Now any value in stack will be greater than current value
            # So current value = k, value in stack = j
            # So k > j
            # Now we want to find 'i'
            # We can find 'i' from the 2nd value in stack automatically, as we are keeping
            # left_min as 2nd value in stack.
            # So stack[-1][1] == 'i'
            if stack and n > stack[-1][1]:
                return True
            
            stack.append([n, curMin])
            curMin = min(curMin, n)
        return False
            