659. Split Array into Consecutive Subsequences
You are given an integer array nums that is sorted in non-decreasing order.

Determine if it is possible to split nums into one or more subsequences 
such that both of the following conditions are true:

Each subsequence is a consecutive increasing sequence 
(i.e. each integer is exactly one more than the previous integer).
All subsequences have a length of 3 or more.
Return true if you can split nums according to the above conditions, or false otherwise.

A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) 
of the elements without disturbing the relative positions of the remaining elements. 
(i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).

 

Example 1:

Input: nums = [1,2,3,3,4,5]
Output: true
Explanation: nums can be split into the following subsequences:
[1,2,3,3,4,5] --> 1, 2, 3
[1,2,3,3,4,5] --> 3, 4, 5
Example 2:

Input: nums = [1,2,3,3,4,4,5,5]
Output: true
Explanation: nums can be split into the following subsequences:
[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5
[1,2,3,3,4,4,5,5] --> 3, 4, 5
Example 3:

Input: nums = [1,2,3,4,4,5]
Output: false
Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.
 

Constraints:

1 <= nums.length <= 10^4
-1000 <= nums[i] <= 1000
nums is sorted in non-decreasing order.

Approach:
Idea:

Using two map
	One for how many sequences have that ending word
	Another for how many numbers are unchecked
Loop through every number
	If there is sequence before the number, we add the number to the seq
	If not we create a new seq using the number
	If there aren't two numbers behind to let us create new seq, return False
	
'left' takes care of how many characters are remaining.
As it's a DICT, it helps in quick random access.
'seq' takes care of if we want to continue a sequence or start a new sequence

if we want to start a new sequence, we need curr, curr+1, curr+2 these 3 values as minimum allowed length is 3



Code:
class Solution:
    def isPossible(self, nums: List[int]) -> bool:
        length = len(nums)
        if length < 3:
            return False
        
        seq = defaultdict(int)      # key: ending number, val: how many seqs
        left = Counter(nums)        # key: number, val: how many of key are left unchecked
        
        for num in nums:
            if (not left[num]): continue   # the number is already in seqs, we don't need to check again
            
            if (seq[num-1] > 0):    # If there is sequence before the number, we add the number to the seq
                seq[num-1] -= 1 
                seq[num] += 1
                left[num] -= 1
                
            else:   # If not we create a new seq using the number
                if (not left[num+1] or not left[num+2]):  #  If there aren't two numbers ahead to let us create new seq, return False
                    return False
                left[num] -= 1
                left[num+1] -= 1
                left[num+2] -= 1
                seq[num+2] += 1
        
        return True        
                