Question:
Given an array of integers nums and an integer k, return the total number of continuous 
subarrays whose sum equals to k.

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2

Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

Approach:
This question is solved using Prefix Sum Hashmap.
As array values can be -ve and +ve we cannot use Sliding Window here even if the question contains
the word SUBARRAY.

[7, 0, -7, 7] for K = 7
Ans: [7], [7,0], [7,0,-7,7]
We need prefix sum map
Take continuous sum of the array in curr_sum,
if curr_sum == k:
	Then we found a subarray with sum = k
	result += 1

Now curr_sum is storing sum from 0 to len(array), but our required subarray can start from anywhere
so to count those subarray that start from any index, we use prefix map
[1,2,3,0,-2,-1,3], k = 3
     i
Here suppose we are at ith position, there
curr_sum = 6
target = 6 - 3 = 3
We can see that in array [1,2,3], if we exclude [1,2] we can get [3] which is the required subarray
so we search for target in prefix_sum_map this map will store the frequecy of all previously 
computed sums
if target in prefix_sum_map:
	result += prefix_sum_map[target]
return result

	
Solution:
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        freq = defaultdict(lambda: 0)
        sums = 0
        result = 0
        for i in nums:
            sums += i
            if sums == k:
                result += 1
            
            target = sums - k
            if target in freq:
                result += freq[target]
            
            freq[sums] += 1
        return result