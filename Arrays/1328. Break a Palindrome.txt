1328. Break a Palindrome

Given a palindromic string of lowercase English letters palindrome, replace exactly one character 
with any lowercase English letter so that the resulting string is not a palindrome and that it is 
the lexicographically smallest one possible.

Return the resulting string. If there is no way to replace a character to make it not a palindrome, 
return an empty string.

A string a is lexicographically smaller than a string b (of the same length) if in the first position 
where a and b differ, a has a character strictly smaller than the corresponding character in b. 
For example, "abcc" is lexicographically smaller than "abcd" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.

 

Example 1:

Input: palindrome = "abccba"
Output: "aaccba"
Explanation: There are many ways to make "abccba" not a palindrome, such as "zbccba", "aaccba", and "abacba".
Of all the ways, "aaccba" is the lexicographically smallest.
Example 2:

Input: palindrome = "a"
Output: ""
Explanation: There is no way to replace a single character to make "a" not a palindrome, 
so return an empty string.


Approach:
Smallest Palindrome can only be broken when you replace a single character in the 1st half of the palindrome 
string.
So here we want the smallest string possible, so replace the 1st character that is not 'a'
And keep the rest of the string as same.
Edge Case:
If the input itself doesnt have any characters other than 'a' then we should replace the last character
of the input string with 'b' as 'b' is the 2nd smallest character in English.

Code:
class Solution:
    def breakPalindrome(self, palindrome: str) -> str:
        n = len(palindrome)
        if n == 1:
            return ""
        found_non_a = False
        result = ""
        for i in range(n//2):
            char = palindrome[i]
            if char != "a":
                found_non_a = True
                result += "a"
                break
            else:
                result += char
        result += palindrome[i+1:]
        if found_non_a:
            return result
        return result[:-1] + "b"
        