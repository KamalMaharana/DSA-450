169. Majority Element
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than 
[n / 2] times. You may assume that the majority element always exists in the array.


Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


Approach:
For this question, we need to remember the solution as it is not quite intuitive for me.
initialize a variable "major"
set count = 0
then run a loop from 1 to END to check through all the values
if major == nums[i]:
	this means we found consecutive same elements, increase the count
	count += 1
elif count == 0:
	this means we need to start checking again, 
	this means set major = nums[i] and count = 1 and start again
	major = nums[i]
	count = 1
else:
	major != nums[i] and count > 0
	This is a mismatch, so reduce count
	count -= 1

	
Solution:
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        major = nums[0]
        count = 1
        for i in range(1, len(nums)):
            if major == nums[i]:
                count += 1
            elif count == 0:
                major = nums[i]
                count = 1
            else:
                count -= 1
        return major
        