532. K-diff Pairs in an Array
Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i < j < nums.length
|nums[i] - nums[j]| == k
Notice that |val| denotes the absolute value of val.

Example 1:

Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:

Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:

Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).

Approach:
Here we need to operate on unique values so that we get unique pairs.
Here the uniqueness is not only by INDEX but also by value.
So [1,2,1] pairs = (1,2) == (2, 1) even though we have 2 1s. 
So if we operate on set or dictionary for operating on unique values, we will miss out of case
where k = 0, that both elements should be same.
So there is a special case for k == 0.
So we run a loop on frequency map so that we only operate on unique values
then 
if k > 1:
	we check for target
	As equation is |a - b| == k
	a = k + b
	So target = k + nums[i]; for every nums[i] we need to check if target is present in frequency map:
	if yes, then we increment counter
elif k == 0:
	here we check if frequency[nums[i]] > 1: that is we can have pair of same numbers only if there are
	atleast 2 such numbers in the array.
	[1, 2, 3], here for k = 0; result = 0 coz none of the values have their other hald present.
	[1, 2, 1] here for k = 0; result = 1 coz we have 2 1's

Solution:
Class Solution:
	def findPairs(self, nums: List[int], k: int) -> int:
		count = 0
		frequency = Counter(nums)
			for val in frequency:
				target = val + k
				if (target in frequency and k > 0) or (k == 0 and frequency[target] > 1):
					count += 1
		return count
		