Question:
Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

 

Example 1:

Input: arr = [2,1]
Output: false
Example 2:

Input: arr = [3,5,5]
Output: false
Example 3:

Input: arr = [0,3,2,1]
Output: true


Approach:
Simple array traversal.
Find the break point, the index where array values start in decreasing order.
After finding the break point, check in invalid order if arr[i - 1] < arr[i]: return False
if we don't find an break point:
	return False

else:
return True


Solution:
class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        if len(arr) < 3:
            return False
        
        index = None
        for i in range(1, len(arr)):
            if arr[i - 1] == arr[i]:
                return False
            
            if arr[i - 1] > arr[i]:
                index = i - 1
                break
        if index:
            for i in range(index, len(arr) - 1):
                if arr[i] <= arr[i + 1]:
                    return False
            return True
        return False