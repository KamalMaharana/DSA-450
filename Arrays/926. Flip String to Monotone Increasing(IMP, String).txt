926. Flip String to Monotone Increasing
A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

Example 1:

Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.

Example 2:

Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.

Example 3:

Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.


Approach:
Algorithm:

1. Skip 0's until we encounter the first 1.
2. Keep track of number of 1's in onesCount (Prefix).
3. Any 0 that comes after we encounter 1 can be a potential candidate for flip. Keep track of it in flipCount.
4. If flipCount exceeds oneCount - (Prefix 1's flipped to 0's)
	a. Then we are trying to flip more 0's (suffix) than number of 1's (prefix) we have.
	b. Its better to flip the 1's instead.

Code:
class Solution:
    def minFlipsMonoIncr(self, s: str) -> int:
        one_prefix = 0
        flip_count = 0
        for i in s:
            if i == "0":
                if one_prefix == 0:
                    continue
                flip_count+=1
            else:
                one_prefix += 1
            
            if flip_count > one_prefix:
                flip_count = one_prefix
        return flip_count

