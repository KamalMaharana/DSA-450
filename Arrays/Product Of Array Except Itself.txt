Notes:
Given an integer array nums, return an array answer such that answer[i] is equal 
to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the 
division operation.

Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Notes:
Here we could have stored LEFT multiplication and RIGHT multiplication in seperate 
arrays; as we cannot have 0 until the number itself is 0, so default = 1
nums = [1, 2, 3, 4]
Using, left[i] = left[i-1] * nums[i - 1]; we get
Left = [1, 1, 2, 6]
Similarly, right[i] = right[i + 1] * nums[i + 1]; we get
Right = [24, 12, 4, 1]
So after this, output[i] = left[i] * right[i]
BUT THIS SOLUTION TAKES O(N) EXTRA SPACE.
NOT EFFICIENT SOLUTION.

Here, we will discuss EFFICIENT SOLUTION:
Instead of having to a RIGHT array, we can perform that operation on the LEFT array
itself, and then output the LEFT ARRAY.
Here we'll refer LEFT ARRAY as OUTPUT array.
Here we will calculate the product from LEFT -> RIGHT and then from RIGHT -> LEFT
But before finding, we 1st update the output at current index, so that
When we update current index output, we will not include current index value;
Just like sum of all values, we take product of all values.
So 1st left to right
initialize LEFT(result of product of all values from left to right) = 1
Because 0 * anything = 0
Then start the iteration, we could also initialize left = nums[0], and start iteration
from i = 0 to N.
left = 1st element in NUMS i.e nums[0]
for i in range(1, N):
  output.append(left)
  left *= nums[i]

Similary, we do for Right -> Left product.
right = last element
for i in range(2ns last element -> 0):
  output[i] *= right
  right *= nums[i]

Solution:
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        output = [1]
        n = len(nums)
        left = nums[0]
        for i in range(1, n):
            output.append(left)
            left *= nums[i]
        right = nums[-1]
        for i in range(n - 2, -1, -1):
            output[i] *= right
            right *= nums[i]
        
        return output