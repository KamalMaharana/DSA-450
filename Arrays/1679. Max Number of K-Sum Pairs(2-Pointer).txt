1679. Max Number of K-Sum Pairs
You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.

Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.


Approach:
1. Time Complexity: O(N), Space Complexity: O(N)
This problem has interesting complexity trade-offs
2. Time Complexity: O(NLogN), Space Complexity: O(1)

1. Time Complexity: O(N), Space Complexity: O(N)
In here, as you might have guessed by looking at the Space Complexity, here we use HashMap for the optimization
We use running Hash Check tecnique.
In this while iterating the array, we check in Hashmap and also in the same loop we insert value in the Hashmap
if target in map and map[target] > 0:
	count += 1
	map[target] -= 1
Ex:
nums = [1,2,3,4], k = 5
i = 0, target = 5 - 1 = 4 it's not in map so goto else
map.add(1), map = {1: 1}
i = 1, target = 5 - 2 = 3 it's not in map so goto else
map.add(2), map = {1: 1, 2: 1}
i = 2, target = 5 - 3 = 2, it's present so 
count += 1, count = 1
map[2] -= 1; map = {1: 1, 2: 0}; Don't add 3 in map as we took 2,3 out.
You can remove 2 entirely from the map or just set it's value to 0
i = 3, target = 5 - 4 = 1, it's present so
count += 1, count = 2
map[1] -= 1; map = {1: 0, 2: 0}
result = count = 2

Code:
class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        _map = defaultdict(lambda: 0)
        count  = 0
        for i in range(len(nums)):
            target = k - nums[i]
            if _map[target] > 0:
                count += 1
                _map[target] -= 1
                
            else:
                _map[nums[i]] += 1
        return count


2. Time Complexity: O(NLogN), Space Complexity: O(1)
Here we use the Two Sum algorithm that uses sorting and then 2 pointer.
Sort the array then;
Just count all the pairs that equals to target = k.
When you find 1,just increment the count

Code:
class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        nums.sort()
        left = 0
        right = len(nums) - 1
        count = 0
        while left < right:
            val = nums[left] + nums[right]
            if val == k:
                count += 1
                left += 1
                right -= 1
            elif val < k:
                left += 1
            else:
                right -= 1
        
        return count


