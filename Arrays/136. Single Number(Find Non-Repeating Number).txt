136. Single Number
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.


Example 1:

Input: nums = [2,2,1]
Output: 1

Example 2:

Input: nums = [4,1,2,1,2]
Output: 4

Example 3:

Input: nums = [1]
Output: 1

Approach:
If numbers repeat twice, then XOR of all these numbers will be 0
A xor A = 0, XOR of same number is 0
Take XOR of all elements in the array, then the final result after these XOR operations will be 
our answer, coz the number that are repeated twice will be eliminated and the only non repeating number
will remain.
arr = [2,3,2,3,4], so XOR is ( [2,3,2,3] xor [4] ) = (0 xor 4) coz these numbers are repeating twice
so remaining number 4 is the resultant non repeating number.

Solution:
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        result = nums[0]
        for i in range(1,len(nums)):
            result = result ^ nums[i]
        return result




