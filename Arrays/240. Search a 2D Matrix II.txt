240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. 
This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

Example 1:

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false


Approach:
1. Optimal TC = O(row + column)
Start from either top right or bottom left value
Suppose if we start from top-right, 
we know that row and column both are sorted.
So from top-right we have 3 choices to make
1. if current value = target: return True
2. if current value < target: move down (This means down value is greater than current value in column)
3. if current value > target: move left (This means left value is less that current value in row)

This is similar to 2-sum approach, but here we are using that approach on 2D Matrix.

		
Code:
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        def isValid(x, y):
            return 0 <= x < m and 0 <= y < n
        
        m = len(matrix)
        n = len(matrix[0])
        x, y = 0, n - 1
        while isValid(x, y):
            value = matrix[x][y]
            if value == target:
                return True
            elif value > target:
                y -= 1
            else:
                x += 1
                
        return False