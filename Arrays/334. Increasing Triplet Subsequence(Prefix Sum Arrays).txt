Given an integer array nums, return true if there exists a 
triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. 
If no such indices exists, return false.

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.

Approach:
We just need to satisfy following condition
i < j < k, regardless of the value of i,j,k
So what we do is, have 2 Prefix Sum array, that keeps leftMin and rightMax respectively.
leftMin[i] = minimum number that is present to left of current index 'i'
rightMax[i] = maximum number that is present to right of current index 'i'
As we have both the arrays, now we loop through the array index and check this
if leftMin[index] < arr[index] < rightMax[index]
This is same as i < j < k i.e mentioned in question
search for 'j' and you will find 'i' and 'k' present in the 2 respective arrays.

Code:
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        leftMin = [2**32 for i in nums]
        rightMax = [-2**32 for i in nums]
        
        for i in range(1, len(nums)):
            leftMin[i] = min(nums[i-1], leftMin[i-1])
        
        
        for i in range(len(nums) - 2, -1, -1):
            rightMax[i] = max(rightMax[i+1], nums[i+1])
        
        print("LeftMin: ", leftMin)
        print("RightMax: ", rightMax)
        
        for i in range(len(nums)):
            if leftMin[i] < nums[i] < rightMax[i]:
                return True
        
        return False