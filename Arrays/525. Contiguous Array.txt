Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 
Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Approach:
Here we use an integer stack. named "count"
In count, add "+1" to count when we are at '1'
add "-1" from count when we are at "0"
So whenever there are same number of 0s and 1s, count will be count = 0.
when count = 0; we subarr_length = i + 1
[0,1,0,1] = count = -1 + 1 + -1 + 1 = 0
So for arr = [0,0,0,1,1]
here the largest array starts from index = 1 to 4; how to know where our array starts from?
Let's look at the count of above array
i = 0; nums[i] = 0; count = -1
i = 1; nums[i] = 0; count = -2
i = 2; nums[i] = 0; count = -3
i = 3; nums[i] = 1; count = -2
i = 4; nums[i] = 1; count = -1

Here we can see count = -1 and -2 are repeating;
this means that from previous -1 to current -1 and from previous -2 to current -2, there is a contiguous.
This is similar to "Subarray sum equals K".
So we store count and the index when that count occurs in a MAP.
As count can occur multiple time, we just overwrite the existing value from map so to keep the 1st
index where count occured.
so,

map[count] = i
if count in map:
	subarr_length = i - map[count]

So for above example; arr = [0,0,0,1,1]
at i = 3, count = -2, map = {-1: 0, -2: 1, -3: 2}
but we know that at i = 1, we found count = -2 i.e map[-2] = 1 at the moment, 
so subarr_length = i - map[-2] = 3 - 1 = 2 ;subarr = [0,1]
we don't store map[-2] = 3rd index coz -2 occured at index 1 for first time, 
next time when -2 occurs in count, then distance between 1 - curr_index will be the subarr with
same number of 0s and 1s
At i = 4, count = -1, map = {-1: 0, -2: 1, -3: 2}
subarr_length = 4 - 0 = 4; [0,0,1,1]

Solution:
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        temp = dict()
        count = 0
        subarr = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                count -= 1
            else:
                count += 1
            if count == 0:
                subarr = i+1
            
            # This part is inspired from "Subarray sum equals K"
            if count in temp:
                subarr = max(subarr, i-temp[count])
            else:
                temp[count] = i
                
        return subarr