581. Shortest Unsorted Continuous Subarray
Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.

 

Example 1:

Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Example 2:

Input: nums = [1,2,3,4]
Output: 0
Example 3:

Input: nums = [1]
Output: 0

Approach:
Naive solution is sort the array and then iterate over it and check if nums[i] == sorted_nums[i]
Left pointer indicating start, Right pointer indicating end of the resultant subarray.

Optimised Approach is using 2 Pointer, in this case we need to run 2 O(N) loops to fill these pointers with
values.

1st Loop: Find the largest index that breaks the sorted arrangement 
i.e Find the last unsorted element index.

	end = 0
	prev = nums[end]
    for i in range(len(nums)):
        if nums[i] < prev:
            end = i
        else:
            prev = nums[i]


2nd Loop: Find the smallest unsorted index, i.e Find the 1st unsorted element index.
	start = len(nums) - 1
    prev = nums[start]
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] > prev:
                start = i
            else:
                prev = nums[i]

At the end we check if end != 0: which means the array is already sorted; we can also check 
if start != len(nums) - 1 for same.
return end + start - 1
else return 0


Solution:
class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        end = 0
        prev = nums[end]
        for i in range(len(nums)):
            if nums[i] < prev:
                end = i
            else:
                prev = nums[i]
        start = len(nums) - 1
        prev = nums[start]
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] > prev:
                start = i
            else:
                prev = nums[i]
        
        if end != 0:
            return end - start + 1
        return 0