You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:

The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.

Example 1:

Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].
Example 2:

Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.

Approach:
We use sliding window approach here.
We will have 2 varialbes to store the min and max, and 2 variables as flags to indicate if we have
MIN and MAX within our current subarray.
start = 0
We traverse through the arr:
if we find a value that is < MIN_REQUIRED or val < MAX_REQUIRED:
	this is when we know that we have to avoid current value and start a new subarray from next value.
	So set, max_found, min_found = False;
	start = i + 1

Both of these below conditions should be clubbed as for a current value only 1 is possible.

if curr_val == MIN_REQUIRED:
	min_found = True
	min_start = i
elif curr_val == MAX_REQUIRED:
	max_found_found = True
	max_start = i

	
Now if we have found both min_found & max_found we can ca
then 
res += (Math.min(minStart, maxStart) - start + 1);


If anyone confused about
res += (Math.min(minStart, maxStart) - start + 1);

number of combinations formula. min tells what came first max or min. start tells index from which length to consider.
Example if start and Math.min(minStart, maxStart) is equal then 1 is result. If start is 0 and min is 1 then 2 combinations possible. If start is 0 and min is 2 then 3 combinations to add
earlier combinations are aleady added so no need to worry on that
start will always be less than or equal to Math.min(minStart, maxStart)
	
	
Code:
class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        res = 0
        minFound = False
        maxFound = False
        start = 0
        minStart = 0
        maxStart = 0
        for i in range(len(nums)):
            num = nums[i]
            if num < minK or num > maxK:
                minFound = False
                maxFound = False
                start = i+1
            if num == minK:
                minFound = True
                minStart = i
            if num == maxK:
                maxFound = True
                maxStart = i
            if minFound and maxFound:
                res += (min(minStart, maxStart) - start + 1)
        return res