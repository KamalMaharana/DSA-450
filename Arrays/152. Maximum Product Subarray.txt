152. Maximum Product Subarray
Given an integer array nums, find a
subarray
that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

Â 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Approach:
Ideally if all the numbers are positive, the best answer is product of all elements of the array.
Here, if we have negative values, and if the count of negative values is even, then too the answer
is product of all numbers coz even negatives cancel out negativity.
If we have odd negative, we need to do something.
So what we do is, 
keep currMax, currMin.
When we get on a negative number we swap  currMin with currMax because 
max * -ve < min.
Also while assigning max and min, we will compare it with current value.
Just incase, product upto now is smaller than current element itself, then we should ignore
previous subarray and start an new subarray with current value.

Code:
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        result = nums[0]
        currMin, currMax = 1, 1
        for n in nums:
            if n < 0:
                currMax, currMin = currMin, currMax
            
            currMax = max(n, n * currMax)
            currMin = min(n, n * currMin)
            result = max(result, currMax)
        
        return result
        